# -*- coding: utf-8 -*-
"""ROCKORMINE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yr_KQix9zJcsvIM5r_JyO7TFlXD2zBFw

# IMporting the depedencies
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# Data collection and data processing"""

sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header= None)
sonar_data.head(200)

# number of rows and columns
sonar_data.shape

sonar_data.describe()  #describe --> statistiacl measures of the data

sonar_data[60].value_counts()  # getting the value counts for M and R



"""# MINE --> M
# ROCK --> R
"""

sonar_data.groupby(60).mean()

# seperating data and labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X,Y)

"""# Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

"""# Model Training --> Logistic Regression"""

model = LogisticRegression()

# training the Logistic Regressoin model with trainging data
model.fit(X_train, Y_train)

"""#Model Evaluation"""

# Accuracy on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data', training_data_accuracy)

# Accuracy on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on test data', test_data_accuracy)



"""# Makinf a Predictiv ersystem"""

input_data = (0.0116,0.0179,0.0449,0.1096,0.1913,0.0924,0.0761,0.1092,0.0757,0.1006,0.2500,0.3988,0.3809,0.4753,0.6165,0.6464,0.8024,0.9208,0.9832,0.9634,0.8646,0.8325,0.8276,0.8007,0.6102,0.4853,0.4355,0.4307,0.4399,0.3833,0.3032,0.3035,0.3197,0.2292,0.2131,0.2347,0.3201,0.4455,0.3655,0.2715,0.1747,0.1781,0.2199,0.1056,0.0573,0.0307,0.0237,0.0470,0.0102,0.0057,0.0031,0.0163,0.0099,0.0084,0.0270,0.0277,0.0097,0.0054,0.0148,0.0092)

# changing the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshapung the np array as we are predicitng for one instance

input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)

if (prediction[0]=='R'):
  print("The object is Rock", prediction)
else:
  print("The object is MINE", prediction)

print(input_data_as_numpy_array)

